import unittest
from gurobipy import multidict, Model, GRB
import pandas as pd
import Programme_optimisation as po  # En supposant que votre code est dans un fichier nommé Programme_optimisation.py

class TestOptimizationModel(unittest.TestCase):
    def setUp(self):
        self.donnees = pd.read_csv('choix_eleves_projet.csv')
        self.scores_choix = {1: 100, 2: 80, 3: 60, 4: 40, 5: 20}
        self.combinaisons, self.scores = po.prepare_data(self.donnees, self.scores_choix)  # En supposant que vous avez une fonction prepare_data dans votre code
        self.m = po.create_model(self.combinaisons, self.scores)  # En supposant que vous avez une fonction create_model dans votre code

    def test_combinaisons(self):
        # Test si le dictionnaire combinaisons est correctement créé
        for key in self.combinaisons:
            self.assertIn(key, self.scores)

    def test_scores(self):
        # Test si le dictionnaire scores est correctement créé
        for key, value in self.scores.items():
            self.assertIn(key, self.combinaisons)
            self.assertIn(value, self.scores_choix.values())

    def test_model(self):
        # Test si le modèle est correctement créé
        self.assertIsInstance(self.m, Model)
        self.assertEqual(self.m.getAttr('ModelName'), 'RAP')
        self.assertEqual(self.m.getObjective().Sense, GRB.MAXIMIZE)

    def test_constraints(self):
        # Test si les contraintes sont correctement ajoutées
        for eleve in set(eleve for (eleve, projet) in self.combinaisons):
            self.assertIsNotNone(self.m.getConstrByName(f"ContrainteUnProjet_{eleve}"))
        for projet in set(projet for (eleve, projet) in self.combinaisons):
            self.assertIsNotNone(self.m.getConstrByName(f"ContrainteMaxParticipants_{projet}"))

if __name__ == '__main__':
    unittest.main()